使用Avro工具生成代码时，定义的模式最好有定义命名空间,否则使用特殊映射的时候会有问题


内存中的序列化和反序列化
读和写都需要指定模式。
通用映射
特殊映射


Avro数据文件
Avro的对象容器文件格式主要用于存储Avro对象序列。这与Hadoop顺序文件的设计非常相似，
它们之间的最大区别在于Avro数据文件主要是面向跨语言使用而设计的。

在数据文件的头部中含有元数据，它包括一个Avro模式和一个sync marker（同步标识），紧接着是一系列包含序列化Avro对象的数据块（压缩可选）。
数据块通过sync marker分隔，而sync marker对该文件来说是唯一的（特定文件的标识信息存储在文件头部）。
Avro数据文件是可切分的，适合MapReduce快速处理。

Avro对象写到数据文件 DatumWriter  DataFileWriter

从数据文件读取对象和从内存流中读取数据类似，只有一个重要的区别：不需要指定模式，因为可以从文件的元数据中读取它。
事实上，还可以对DataFileReader实例调用getSchema（）方法来获取模式，并验证该模式是否和原始写入对象的模式相同。
DatumReader  DataFileReader

模式解析

记录的模式解析：
GenericDatumReader<GenericRecord>(schema,newschema).


新模式			写入		读取		操作
增加的字段		旧		新		通过默认值读取新字段，因为写入时没有该字段
				新		旧		读取时不知道新写入的新字段，所以忽略该字段（投影）

删除的字段		旧		新		读取时忽略已删除的字段（投影）
				新		旧		写入时不写入已删除的字段。如果旧模式对该字段有默认值，那么读取时可以使用该默认值，否则报错。
				
			
Avro模式中可以定义排序，结合MapReduce可以实现排序